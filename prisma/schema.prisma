// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }


// prisma/schema.prisma
// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  firstName     String
  lastName      String
  phoneNumber   String    @unique
  password      String
  role          UserRole  @default(CUSTOMER)
  loginAttempts Int       @default(0)
  lastLogin     DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

// model Product {
//   id          String      @id @default(uuid())
//   name        String
//   description String
//   price       Decimal
//   stock       Int
//   category    String
//   images      String[]
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
//   reviews     Review[]    // Relation to Review model
//   orderItems  OrderItem[] // Relation to OrderItem model

//   @@map("products")
// }

// model Order {
//   id         String      @id @default(uuid())
//   userId     String
//   user       User        @relation(fields: [userId], references: [id])
//   status     OrderStatus @default(PENDING)
//   total      Decimal
//   items      OrderItem[]
//   createdAt  DateTime    @default(now())
//   updatedAt  DateTime    @updatedAt

//   @@map("orders")
// }

// model OrderItem {
//   id        String  @id @default(uuid())
//   orderId   String
//   order     Order   @relation(fields: [orderId], references: [id])
//   productId String
//   product   Product @relation(fields: [productId], references: [id])
//   quantity  Int
//   price     Decimal

//   @@map("order_items")
// }

// model Review {
//   id        String   @id @default(uuid())
//   rating    Int
//   comment   String
//   userId    String
//   user      User     @relation(fields: [userId], references: [id])
//   productId String
//   product   Product  @relation(fields: [productId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("reviews")
// }

// enum OrderStatus {
//   PENDING
//   PROCESSING
//   SHIPPED
//   DELIVERED
//   CANCELLED
// }
